}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Instalar y cargar el paquete "biotools"
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
# Instalar y cargar el paquete "FactoMineR"
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
# Cargar bibliotecas necesarias
library(cluster)
library(e1071)
library(MVN)
# Instalar y cargar el paquete "energy"
if (!requireNamespace("energy", quietly = TRUE)) {
install.packages("energy")
}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Instalar y cargar el paquete "biotools"
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
# Instalar y cargar el paquete "FactoMineR"
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
# Cargar bibliotecas necesarias
library(cluster)
library(e1071)
library(MVN)
# Instalar y cargar el paquete "energy"
if (!requireNamespace("energy", quietly = TRUE)) {
install.packages("energy")
}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Instalar y cargar el paquete "biotools"
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
# Instalar y cargar el paquete "FactoMineR"
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
# Cargar bibliotecas necesarias
library(cluster)
library(e1071)
library(MVN)
# Instalar y cargar el paquete "energy"
if (!requireNamespace("energy", quietly = TRUE)) {
install.packages("energy")
}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
data <- data[, -1]
# Calcular la matriz de distancia Mahalanobis
mahalanobis_dist <- mahalanobis(data, colMeans(data), cov(data))
# Determinar el número óptimo de clústeres utilizando el método de la silueta
silhouette_scores <- sapply(2:6, function(k) {
pam_fit <- pam(mahalanobis_dist, k = k)
mean(silhouette(pam_fit))
})
optimal_k <- which.max(silhouette_scores) + 1
# Realizar PAM (Partitional Around Medoids) con el número óptimo de clústeres
pam_fit <- pam(mahalanobis_dist, k = optimal_k)
# Resumen de PAM
print(pam_fit)
# Realizar análisis de componentes principales (PCA)
pca_fit <- PCA(data)
# Resumen de PCA
print(pca_fit)
# Realizar fuzzy clustering
fuzzy_fit <- e1071::cmeans(data, centers = optimal_k, m = 2, iter.max = 500, verbose = TRUE)
# Resumen de los resultados
print(fuzzy_fit)
# Realizar prueba de normalidad multivariante
mvn_test <- MVN::mvn(data, mvnTest = "mardia")
# Resumen de la prueba
print(mvn_test)
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "robCompositions"
box_m_test <- robCompositions::boxM(data, data$Class)
# Instalar y cargar el paquete "FactoMineR"
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
# Cargar bibliotecas necesarias
library(cluster)
library(e1071)
library(MVN)
# Instalar y cargar el paquete "energy"
if (!requireNamespace("energy", quietly = TRUE)) {
install.packages("energy")
}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Instalar y cargar el paquete "biotools"
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
# Instalar y cargar el paquete "FactoMineR"
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
# Cargar bibliotecas necesarias
library(cluster)
library(e1071)
library(MVN)
# Instalar y cargar el paquete "energy"
if (!requireNamespace("energy", quietly = TRUE)) {
install.packages("energy")
}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Instalar y cargar el paquete "biotools"
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
# Calcular la matriz de distancia Mahalanobis
mahalanobis_dist <- mahalanobis(data, colMeans(data), cov(data))
# Determinar el número óptimo de clústeres utilizando el método de la silueta
silhouette_scores <- sapply(2:6, function(k) {
pam_fit <- pam(mahalanobis_dist, k = k)
mean(silhouette(pam_fit))
})
optimal_k <- which.max(silhouette_scores) + 1
# Realizar PAM (Partitional Around Medoids) con el número óptimo de clústeres
pam_fit <- pam(mahalanobis_dist, k = optimal_k)
# Resumen de PAM
print(pam_fit)
# Realizar análisis de componentes principales (PCA)
pca_fit <- PCA(data)
# Resumen de PCA
print(pca_fit)
# Realizar fuzzy clustering
fuzzy_fit <- e1071::cmeans(data, centers = optimal_k, m = 2, iter.max = 500, verbose = TRUE)
# Resumen de los resultados
print(fuzzy_fit)
# Realizar prueba de normalidad multivariante
mvn_test <- MVN::mvn(data, mvnTest = "mardia")
# Resumen de la prueba
print(mvn_test)
# Agregar impresiones de resultados adicionales aquí para otros análisis que desees
# ...
# Instalar y cargar el paquete "FactoMineR"
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
# Cargar bibliotecas necesarias
library(cluster)
library(e1071)
library(MVN)
# Instalar y cargar el paquete "energy"
if (!requireNamespace("energy", quietly = TRUE)) {
install.packages("energy")
}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Instalar y cargar el paquete "biotools"
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
# Mostrar datos adicionales
cat("data: data\n")
cat("Chi-Sq (approx.) =", box_m_test$chisq, ", df =", box_m_test$df, ", p-value <", box_m_test$p.value, "\n")
# Determinar el número óptimo de clústeres utilizando el método de la silueta
silhouette_scores <- sapply(2:6, function(k) {
pam_fit <- pam(mahalanobis_dist, k = k)
mean(silhouette(pam_fit))
})
optimal_k <- which.max(silhouette_scores) + 1
# Realizar PAM (Partitional Around Medoids) con el número óptimo de clústeres
pam_fit <- pam(mahalanobis_dist, k = optimal_k)
# Resumen de PAM
print(pam_fit)
# Realizar análisis de componentes principales (PCA)
pca_fit <- PCA(data)
# Resumen de PCA
print(pca_fit)
# Realizar fuzzy clustering
fuzzy_fit <- e1071::cmeans(data, centers = optimal_k, m = 2, iter.max = 500, verbose = TRUE)
# Resumen de los resultados
print(fuzzy_fit)
# Realizar prueba de normalidad multivariante
mvn_test <- MVN::mvn(data, mvnTest = "mardia")
# Resumen de la prueba
print(mvn_test)
# Instalar y cargar el paquete "FactoMineR"
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
# Cargar bibliotecas necesarias
library(cluster)
library(e1071)
library(MVN)
# Instalar y cargar el paquete "energy"
if (!requireNamespace("energy", quietly = TRUE)) {
install.packages("energy")
}
library(energy)
# Instalar y cargar el paquete "robCompositions"
if (!requireNamespace("robCompositions", quietly = TRUE)) {
install.packages("robCompositions")
}
library(robCompositions)
# Instalar y cargar el paquete "biotools"
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Calcular la matriz de distancia Mahalanobis
mahalanobis_dist <- daisy(data, metric = "mahalanobis")
# Instalar y cargar los paquetes necesarios
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
library(cluster)
if (!requireNamespace("e1071", quietly = TRUE)) {
install.packages("e1071")
}
library(e1071)
if (!requireNamespace("MVN", quietly = TRUE)) {
install.packages("MVN")
}
library(MVN)
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Calcular las distancias Mahalanobis de cada observación a la media
mahalanobis_values <- apply(data, 1, function(x) mahalanobis(x, colMeans(data), cov(data)))
# Convertir en una matriz de distancia
mahalanobis_dist <- dist(mahalanobis_values)
# Determinar el número óptimo de clústeres utilizando el método de la silueta
silhouette_scores <- sapply(2:6, function(k) {
pam_fit <- pam(as.dist(mahalanobis_dist), k)
mean(silhouette(pam_fit)$sil_width)
})
# Instalar y cargar los paquetes necesarios
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
library(cluster)
if (!requireNamespace("e1071", quietly = TRUE)) {
install.packages("e1071")
}
library(e1071)
if (!requireNamespace("MVN", quietly = TRUE)) {
install.packages("MVN")
}
library(MVN)
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Calcular las distancias Mahalanobis de cada observación a la media
mahalanobis_values <- apply(data, 1, function(x) mahalanobis(x, colMeans(data), cov(data)))
# Convertir en una matriz de distancia
mahalanobis_dist <- dist(mahalanobis_values)
# Determinar el número óptimo de clústeres utilizando el método de la silueta
silhouette_scores <- sapply(2:6, function(k) {
pam_fit <- pam(as.dist(mahalanobis_dist), k)
silhouette_widths <- silhouette(pam_fit)
mean(silhouette_widths[, "sil_width"])
})
optimal_k <- which.max(silhouette_scores) + 1
# Realizar PAM (Partitioning Around Medoids) con el número óptimo de clústeres
pam_fit <- pam(as.dist(mahalanobis_dist), k = optimal_k)
print(pam_fit)
# Realizar análisis de componentes principales (PCA)
pca_fit <- PCA(data)
print(pca_fit)
# Realizar fuzzy clustering
fuzzy_fit <- e1071::cmeans(data, centers = optimal_k, m = 2, iter.max = 500, verbose = TRUE)
print(fuzzy_fit)
# Realizar prueba de normalidad multivariante
mvn_test <- MVN::mvn(data, mvnTest = "mardia")
print(mvn_test)
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
# Instalar y cargar los paquetes necesarios
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
library(cluster)
if (!requireNamespace("e1071", quietly = TRUE)) {
install.packages("e1071")
}
library(e1071)
if (!requireNamespace("MVN", quietly = TRUE)) {
install.packages("MVN")
}
library(MVN)
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Calcular las distancias Mahalanobis de cada observación a la media
mahalanobis_values <- apply(data, 1, function(x) mahalanobis(x, colMeans(data), cov(data)))
# Convertir en una matriz de distancia
mahalanobis_dist <- dist(mahalanobis_values)
# Instalar y cargar los paquetes necesarios
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
install.packages("FactoMineR")
}
library(FactoMineR)
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
library(cluster)
if (!requireNamespace("e1071", quietly = TRUE)) {
install.packages("e1071")
}
library(e1071)
if (!requireNamespace("MVN", quietly = TRUE)) {
install.packages("MVN")
}
library(MVN)
if (!requireNamespace("biotools", quietly = TRUE)) {
install.packages("biotools")
}
library(biotools)
# Cargar los datos
data <- read.table("C:/BreastTissue.txt", header = TRUE, sep = ";", dec = ".")
# Extraer la columna "Class"
classes <- data$Class
data <- data[, -1]
# Calcular las distancias Mahalanobis de cada observación a la media
mahalanobis_values <- apply(data, 1, function(x) mahalanobis(x, colMeans(data), cov(data)))
# Imprimir las primeras 10 distancias Mahalanobis
cat("Primeras 10 Distancias Mahalanobis:\n")
print(mahalanobis_values[1:10])
# Resumen estadístico de todas las distancias Mahalanobis
cat("\nResumen Estadístico de las Distancias Mahalanobis:\n")
print(summary(mahalanobis_values))
# Convertir en una matriz de distancia
mahalanobis_dist <- dist(mahalanobis_values)
# Determinar el número óptimo de clústeres utilizando el método de la silueta
silhouette_scores <- sapply(2:6, function(k) {
pam_fit <- pam(as.dist(mahalanobis_dist), k)
silhouette_widths <- silhouette(pam_fit)
mean(silhouette_widths[, "sil_width"])
})
optimal_k <- which.max(silhouette_scores) + 1
# Realizar PAM (Partitioning Around Medoids) con el número óptimo de clústeres
pam_fit <- pam(as.dist(mahalanobis_dist), k = optimal_k)
print(pam_fit)
# Determinar el número óptimo de clústeres utilizando el método de la silueta
silhouette_scores <- sapply(2:6, function(k) {
pam_fit <- pam(as.dist(mahalanobis_dist), k)
silhouette_widths <- silhouette(pam_fit)
mean(silhouette_widths[, "sil_width"])
})
# Crear una tabla con las puntuaciones de silueta
silhouette_table <- data.frame(
Numero_de_Clusteres = 2:6,
Puntuacion_Silueta = silhouette_scores
)
# Imprimir la tabla
print(silhouette_table)
# Identificar el número óptimo de clústeres
optimal_k <- which.max(silhouette_scores) + 1
cat("\nNúmero óptimo de clústeres:", optimal_k, "\n")
# Realizar PAM (Partitioning Around Medoids) con el número óptimo de clústeres
pam_fit <- pam(as.dist(mahalanobis_dist), k = optimal_k)
print(pam_fit)
# Realizar análisis de componentes principales (PCA)
pca_fit <- PCA(data)
print(pca_fit)
# Realizar fuzzy clustering
fuzzy_fit <- e1071::cmeans(data, centers = optimal_k, m = 2, iter.max = 500, verbose = TRUE)
print(fuzzy_fit)
# Realizar prueba de normalidad multivariante
mvn_test <- MVN::mvn(data, mvnTest = "mardia")
print(mvn_test)
# Realizar prueba de homogeneidad de matrices de covarianza (Box's M) usando el paquete "biotools"
box_m_test <- biotools::boxM(data, classes)
# Resumen de la prueba
print(box_m_test)
