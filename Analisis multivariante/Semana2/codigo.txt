# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")

# Verificar la estructura de los datos
str(datos)

# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
datos[, 4:16] <- scale(datos[, 4:16])

# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, 4:16])

# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)

# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")

# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)

# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)

# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)

# Calcular los valores propios de la solución
valores_propios <- eigen(matriz_distancia)$values

# Calcular la varianza explicada por las dimensiones
varianza_total <- sum(valores_propios)
varianza_explicada <- cumsum(valores_propios) / varianza_total

# Imprimir los valores propios
cat("Valores propios:\n")
print(valores_propios)

# Imprimir la varianza explicada
cat("Varianza explicada:\n")
print(varianza_explicada)

# Calcular la bondad de ajuste (porcentaje de varianza explicada)
bondad_ajuste <- varianza_explicada[2]  # Para la dimensión 2
cat("Bondad de ajuste (Dimensión 2):", bondad_ajuste)

# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)

# Graficar las distancias ajustadas y observadas
plot(matriz_distancia, main = "Distancias Observadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
plot(distancias_ajustadas, main = "Distancias Ajustadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)

# Realizar el escalado multidimensional no métrico
escalamiento_no_metrico <- isoMDS(matriz_distancia, k = 2)
cat("Escalamiento No Métrico:\n")
print(escalamiento_no_metrico)

# Crear un gráfico bidimensional
plot(escalamiento_no_metrico$points, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")

# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices_no_metrico <- sample(1:nrow(datos), 10)
text(escalamiento_no_metrico$points[sample_indices_no_metrico, ], labels = datos$name[sample_indices_no_metrico], cex = 0.7)

# Calcular la distancia entre todas las combinaciones de categorías en la solución no métrica
distancias_combinaciones_no_metrico <- dist(escalamiento_no_metrico$points)

# Encontrar la pareja más parecida
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- which(distancias_combinaciones_no_metrico == min_distancia_no_metrico, arr.ind = TRUE)

# Obtener la ubicación actual del directorio de trabajo
ubicacion_actual <- getwd()

# Imprimir la ubicación en la consola
cat("Ubicación actual del directorio de trabajo:\n")
print(ubicacion_actual)
