# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, 4:16])
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)
# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)
# Calcular los valores propios de la solución
valores_propios <- eigen(matriz_distancia)$values
# Calcular la varianza explicada por las dimensiones
varianza_total <- sum(valores_propios)
varianza_explicada <- cumsum(valores_propios) / varianza_total
# Imprimir los valores propios
cat("Valores propios:\n")
print(valores_propios)
# Imprimir la varianza explicada
cat("Varianza explicada:\n")
print(varianza_explicada)
# Calcular la bondad de ajuste (porcentaje de varianza explicada)
bondad_ajuste <- varianza_explicada[2]  # Para la dimensión 2
cat("Bondad de ajuste (Dimensión 2):", bondad_ajuste)
# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)
# Graficar las distancias ajustadas y observadas
plot(matriz_distancia, main = "Distancias Observadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
plot(distancias_ajustadas, main = "Distancias Ajustadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
# Realizar el escalado multidimensional no métrico
escalamiento_no_metrico <- isoMDS(matriz_distancia, k = 2)
# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Verificar la estructura de los datos
str(datos)
# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
datos[, 4:16] <- scale(datos[, 4:16])
# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, 4:16])
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)
# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)
# Calcular los valores propios de la solución
valores_propios <- eigen(matriz_distancia)$values
# Calcular la varianza explicada por las dimensiones
varianza_total <- sum(valores_propios)
varianza_explicada <- cumsum(valores_propios) / varianza_total
# Imprimir los valores propios
cat("Valores propios:\n")
print(valores_propios)
# Imprimir la varianza explicada
cat("Varianza explicada:\n")
print(varianza_explicada)
# Calcular la bondad de ajuste (porcentaje de varianza explicada)
bondad_ajuste <- varianza_explicada[2]  # Para la dimensión 2
cat("Bondad de ajuste (Dimensión 2):", bondad_ajuste)
# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)
# Graficar las distancias ajustadas y observadas
plot(matriz_distancia, main = "Distancias Observadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
plot(distancias_ajustadas, main = "Distancias Ajustadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
# Realizar el escalado multidimensional no métrico
escalamiento_no_metrico <- isoMDS(matriz_distancia, k = 2)
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
datos[, 4:16] <- scale(datos[, 4:16])
# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, 4:16])
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)
# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)
# Calcular los valores propios de la solución
valores_propios <- eigen(matriz_distancia)$values
# Calcular la varianza explicada por las dimensiones
varianza_total <- sum(valores_propios)
varianza_explicada <- cumsum(valores_propios) / varianza_total
# Imprimir los valores propios
cat("Valores propios:\n")
print(valores_propios)
# Imprimir la varianza explicada
cat("Varianza explicada:\n")
print(varianza_explicada)
# Calcular la bondad de ajuste (porcentaje de varianza explicada)
bondad_ajuste <- varianza_explicada[2]  # Para la dimensión 2
cat("Bondad de ajuste (Dimensión 2):", bondad_ajuste)
# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)
# Graficar las distancias ajustadas y observadas
plot(matriz_distancia, main = "Distancias Observadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
plot(distancias_ajustadas, main = "Distancias Ajustadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
# Realizar el escalado multidimensional no métrico utilizando vegan::metaMDS
escalamiento_no_metrico <- metaMDS(matriz_distancia, k = 2)
cat("Escalamiento No Métrico:\n")
print(escalamiento_no_metrico)
# Crear un gráfico bidimensional
plot(escalamiento_no_metrico$points, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices_no_metrico <- sample(1:nrow(datos), 10)
text(escalamiento_no_metrico$points[sample_indices_no_metrico, ], labels = datos$name[sample_indices_no_metrico], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías en la solución no métrica
distancias_combinaciones_no_metrico <- dist(escalamiento_no_metrico$points)
# Encontrar la pareja más parecida
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- which(distancias_combinaciones_no_metrico == min_distancia_no_metrico, arr.ind = TRUE)
# Obtener la ubicación actual del directorio de trabajo
ubicacion_actual <- getwd()
# Imprimir la ubicación en la consola
cat("Ubicación actual del directorio de trabajo:\n")
print(ubicacion_actual)
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
datos[, 4:16] <- scale(datos[, 4:16])
# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, 4:16])
# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
datos[, 4:16] <- scale(datos[, 4:16])
cat("Variables estandarizadas:\n")
print(datos[, 4:16])
# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, 4:16])
cat("Matriz de distancia calculada:\n")
print(matriz_distancia)
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Abrir la ventana de gráficos de manera explícita
windows()  # Para Windows
# Si estás en un sistema diferente, puedes usar quartz() para macOS o x11() para Linux/Unix
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Ver las coordenadas resultantes
print(escalamiento_metrico)
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)
# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)
# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)
# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)
# Imprimir la matriz de distancias
print(distancias_combinaciones)
# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)
# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)
# Imprimir la distancia mínima y la pareja más parecida
cat("Distancia mínima:", min_distancia, "\n")
cat("Pareja más parecida:", pareja_mas_parecida, "\n")
# Calcular los valores propios de la solución
valores_propios <- eigen(matriz_distancia)$values
# Calcular la varianza explicada por las dimensiones
varianza_total <- sum(valores_propios)
varianza_explicada <- cumsum(valores_propios) / varianza_total
# Imprimir los valores propios
cat("Valores propios:\n")
print(valores_propios)
# Imprimir la varianza explicada
cat("Varianza explicada:\n")
print(varianza_explicada)
# Calcular la bondad de ajuste (porcentaje de varianza explicada)
bondad_ajuste <- varianza_explicada[2]  # Para la dimensión 2
cat("Bondad de ajuste (Dimensión 2):", bondad_ajuste)
# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)
# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)
# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)
# Imprimir las distancias ajustadas
print(distancias_ajustadas)
# Graficar las distancias ajustadas y observadas
plot(matriz_distancia, main = "Distancias Observadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
plot(distancias_ajustadas, main = "Distancias Ajustadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
# Realizar el escalado multidimensional no métrico utilizando vegan::metaMDS
escalamiento_no_metrico <- metaMDS(matriz_distancia, k = 2)
cat("Escalamiento No Métrico:\n")
print(escalamiento_no_metrico)
# Crear un gráfico bidimensional
plot(escalamiento_no_metrico$points, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Crear un gráfico bidimensional
plot(escalamiento_no_metrico$points, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices_no_metrico <- sample(1:nrow(datos), 10)
text(escalamiento_no_metrico$points[sample_indices_no_metrico, ], labels = datos$name[sample_indices_no_metrico], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías en la solución no métrica
distancias_combinaciones_no_metrico <- dist(escalamiento_no_metrico$points)
# Calcular la distancia entre todas las combinaciones de categorías en la solución no métrica
distancias_combinaciones_no_metrico <- dist(escalamiento_no_metrico$points)
# Encontrar la pareja más parecida
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- which(distancias_combinaciones_no_metrico == min_distancia_no_metrico, arr.ind = TRUE)
# Calcular la distancia entre todas las combinaciones de categorías en la solución no métrica
distancias_combinaciones_no_metrico <- dist(escalamiento_no_metrico$points)
# Encontrar la pareja más parecida
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- which(distancias_combinaciones_no_metrico == min_distancia_no_metrico, arr.ind = TRUE)
# Imprimir la distancia mínima y la pareja más parecida
cat("Distancia mínima en el análisis no métrico:", min_distancia_no_metrico, "\n")
cat("Pareja más parecida en el análisis no métrico:", datos$type[pareja_mas_parecida_no_metrico[1, 1]], "y", datos$type[pareja_mas_parecida_no_metrico[1, 2]], "\n")
# Imprimir la distancia mínima y la pareja más parecida (con verificación)
if (length(pareja_mas_parecida_no_metrico) > 0) {
cat("Distancia mínima en el análisis no métrico:", min_distancia_no_metrico, "\n")
cat("Pareja más parecida en el análisis no métrico:", datos$type[pareja_mas_parecida_no_metrico[1, 1]], "y", datos$type[pareja_mas_parecida_no_metrico[1, 2]], "\n")
} else {
cat("No se encontraron parejas en el análisis no métrico.\n")
}
# Calcular la distancia entre todas las combinaciones de categorías en la solución no métrica
distancias_combinaciones_no_metrico <- dist(escalamiento_no_metrico$points)
# Encontrar la pareja más parecida
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- which(distancias_combinaciones_no_metrico == min_distancia_no_metrico, arr.ind = TRUE)
# Imprimir la distancia mínima y la pareja más parecida (con verificación)
if (length(pareja_mas_parecida_no_metrico) > 0) {
cat("Distancia mínima en el análisis no métrico:", min_distancia_no_metrico, "\n")
cat("Pareja más parecida en el análisis no métrico:", datos$type[pareja_mas_parecida_no_metrico[1, 1]], "y", datos$type[pareja_mas_parecida_no_metrico[1, 2]], "\n")
} else {
cat("No se encontraron parejas en el análisis no métrico.\n")
}
# Encontrar la pareja más parecida (enfoque alternativo)
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- NULL
for (i in 1:(nrow(distancias_combinaciones_no_metrico) - 1)) {
for (j in (i + 1):nrow(distancias_combinaciones_no_metrico)) {
if (distancias_combinaciones_no_metrico[i, j] == min_distancia_no_metrico) {
pareja_mas_parecida_no_metrico <- c(i, j)
break
}
}
if (!is.null(pareja_mas_parecida_no_metrico)) break
}
# Encontrar la pareja más parecida (enfoque alternativo)
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- NULL
if (length(distancias_combinaciones_no_metrico) > 0) {
for (i in 1:(nrow(distancias_combinaciones_no_metrico) - 1)) {
for (j in (i + 1):nrow(distancias_combinaciones_no_metrico)) {
if (distancias_combinaciones_no_metrico[i, j] == min_distancia_no_metrico) {
pareja_mas_parecida_no_metrico <- c(i, j)
break
}
}
if (!is.null(pareja_mas_parecida_no_metrico)) break
}
}
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
datos[, 4:16] <- scale(datos[, 4:16])
cat("Variables estandarizadas:\n")
print(datos[, 4:16])
# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, 4:16])
cat("Matriz de distancia calculada:\n")
print(matriz_distancia)
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Ver las coordenadas resultantes
print(escalamiento_metrico)
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías
distancias_combinaciones <- dist(escalamiento_metrico)
# Imprimir la matriz de distancias
print(distancias_combinaciones)
# Encontrar la pareja más parecida
min_distancia <- min(distancias_combinaciones)
pareja_mas_parecida <- which(distancias_combinaciones == min_distancia, arr.ind = TRUE)
# Imprimir la distancia mínima y la pareja más parecida
cat("Distancia mínima:", min_distancia, "\n")
cat("Pareja más parecida:", pareja_mas_parecida, "\n")
# Calcular los valores propios de la solución
valores_propios <- eigen(matriz_distancia)$values
# Calcular la varianza explicada por las dimensiones
varianza_total <- sum(valores_propios)
varianza_explicada <- cumsum(valores_propios) / varianza_total
# Imprimir los valores propios
cat("Valores propios:\n")
print(valores_propios)
# Imprimir la varianza explicada
cat("Varianza explicada:\n")
print(varianza_explicada)
# Calcular la bondad de ajuste (porcentaje de varianza explicada)
bondad_ajuste <- varianza_explicada[2]  # Para la dimensión 2
cat("Bondad de ajuste (Dimensión 2):", bondad_ajuste)
# Calcular las distancias ajustadas
distancias_ajustadas <- dist(escalamiento_metrico)
# Imprimir las distancias ajustadas
print(distancias_ajustadas)
# Graficar las distancias ajustadas y observadas
plot(matriz_distancia, main = "Distancias Observadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
plot(distancias_ajustadas, main = "Distancias Ajustadas", xlab = "Especímenes", ylab = "Distancia", pch = 19)
# Realizar el escalado multidimensional no métrico utilizando vegan::metaMDS
escalamiento_no_metrico <- metaMDS(matriz_distancia, k = 2)
cat("Escalamiento No Métrico:\n")
print(escalamiento_no_metrico)
# Crear un gráfico bidimensional
plot(escalamiento_no_metrico$points, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices_no_metrico <- sample(1:nrow(datos), 10)
text(escalamiento_no_metrico$points[sample_indices_no_metrico, ], labels = datos$name[sample_indices_no_metrico], cex = 0.7)
# Calcular la distancia entre todas las combinaciones de categorías en la solución no métrica
distancias_combinaciones_no_metrico <- dist(escalamiento_no_metrico$points)
# Encontrar la pareja más parecida (enfoque alternativo)
min_distancia_no_metrico <- min(distancias_combinaciones_no_metrico)
pareja_mas_parecida_no_metrico <- NULL
if (length(distancias_combinaciones_no_metrico) > 0) {
for (i in 1:(nrow(distancias_combinaciones_no_metrico) - 1)) {
for (j in (i + 1):nrow(distancias_combinaciones_no_metrico)) {
if (distancias_combinaciones_no_metrico[i, j] == min_distancia_no_metrico) {
pareja_mas_parecida_no_metrico <- c(i, j)
break
}
}
if (!is.null(pareja_mas_parecida_no_metrico)) break
}
}
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Verificar si las columnas necesarias están presentes en los datos
if (!all(c("name", 4:16) %in% names(datos))) {
stop("Algunas columnas necesarias no están presentes en los datos")
}
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Verificar si las columnas necesarias están presentes en los datos
if (!all(c("name", 4:16) %in% names(datos))) {
stop("Algunas columnas necesarias no están presentes en los datos")
}
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "C:/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Verificar si las columnas necesarias están presentes en los datos
if (!all(c("name", 4:16) %in% names(datos))) {
stop("Algunas columnas necesarias no están presentes en los datos")
}
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "/mnt/data/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("/mnt/data/cereal.csv")
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "/mnt/data/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Verificar si las columnas necesarias están presentes en los datos
if (!all(c("name", "mfr", "type", "calories", "protein", "fat", "sodium",
"fiber", "carbo", "sugars", "potass", "vitamins", "shelf",
"weight", "cups", "rating") %in% names(datos))) {
stop("Algunas columnas necesarias no están presentes en los datos")
}
# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
datos_norm <- datos
datos_norm[, c("calories", "protein", "fat", "sodium", "fiber", "carbo",
"sugars", "potass", "vitamins", "shelf", "weight", "cups", "rating")] <- scale(datos[, c("calories", "protein", "fat", "sodium", "fiber", "carbo",
"sugars", "potass", "vitamins", "shelf", "weight", "cups", "rating")])
# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos_norm[, c("calories", "protein", "fat", "sodium", "fiber", "carbo",
"sugars", "potass", "vitamins", "shelf", "weight", "cups", "rating")])
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
# Mostrar solo algunas etiquetas (por ejemplo, 10 etiquetas aleatorias)
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)
# Realizar el escalado multidimensional no métrico utilizando vegan::metaMDS
escalamiento_no_metrico <- metaMDS(matriz_distancia, k = 2)
# Crear un gráfico bidimensional
plot(escalamiento_no_metrico$points, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
sample_indices_no_metrico <- sample(1:nrow(datos), 10)
text(escalamiento_no_metrico$points[sample_indices_no_metrico, ], labels = datos$name[sample_indices_no_metrico], cex = 0.7)
# Obtener la ubicación actual del directorio de trabajo
ubicacion_actual <- getwd()
# Imprimir la ubicación en la consola
cat("Ubicación actual del directorio de trabajo:\n")
print(ubicacion_actual)
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (reemplaza "/mnt/data/cereal.csv" con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
# Verificar si las columnas necesarias están presentes en los datos
if (!all(c("name", "mfr", "type", "calories", "protein", "fat", "sodium",
"fiber", "carbo", "sugars", "potass", "vitamins", "shelf",
"weight", "cups", "rating") %in% names(datos))) {
stop("Algunas columnas necesarias no están presentes en los datos")
}
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (asegúrate de reemplazar la ruta con la ubicación real del archivo CSV)
datos <- read.csv("/mnt/data/cereal.csv")
# Instalar y cargar el paquete "vegan" si no está instalado
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
library(vegan)
# Cargar el archivo de datos (asegúrate de reemplazar la ruta con la ubicación real del archivo CSV)
datos <- read.csv("C:/cereal.csv")
print(head(datos)) # Imprimir las primeras filas de los datos
# Verificar si las columnas necesarias están presentes en los datos
required_columns <- c("name", "mfr", "type", "calories", "protein", "fat", "sodium",
"fiber", "carbo", "sugars", "potass", "vitamins", "shelf",
"weight", "cups", "rating")
if (!all(required_columns %in% names(datos))) {
stop("Algunas columnas necesarias no están presentes en los datos")
}
# Estandarizar las variables numéricas (excluyendo las columnas no numéricas)
numeric_columns <- c("calories", "protein", "fat", "sodium", "fiber", "carbo",
"sugars", "potass", "vitamins", "shelf", "weight", "cups", "rating")
datos[, numeric_columns] <- scale(datos[, numeric_columns])
print(head(datos[, numeric_columns])) # Imprimir las primeras filas de las columnas numéricas estandarizadas
# Calcular la matriz de distancia euclidiana
matriz_distancia <- dist(datos[, numeric_columns])
print(matriz_distancia) # Imprimir la matriz de distancia
# Realizar el escalado multidimensional métrico
escalamiento_metrico <- cmdscale(matriz_distancia, k = 2)
print(escalamiento_metrico) # Imprimir las coordenadas del escalado métrico
# Crear un gráfico bidimensional
plot(escalamiento_metrico, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
sample_indices <- sample(1:nrow(datos), 10)
text(escalamiento_metrico[sample_indices, ], labels = datos$name[sample_indices], cex = 0.7)
# Realizar el escalado multidimensional no métrico utilizando vegan::metaMDS
escalamiento_no_metrico <- metaMDS(matriz_distancia, k = 2)
print(escalamiento_no_metrico) # Imprimir los resultados del escalado no métrico
# Crear un gráfico bidimensional para el escalado no métrico
plot(escalamiento_no_metrico$points, type = "n", xlab = "Dimensión 1", ylab = "Dimensión 2")
sample_indices_no_metrico <- sample(1:nrow(datos), 10)
text(escalamiento_no_metrico$points[sample_indices_no_metrico, ], labels = datos$name[sample_indices_no_metrico], cex = 0.7)
# Obtener la ubicación actual del directorio de trabajo
ubicacion_actual <- getwd()
cat("Ubicación actual del directorio de trabajo:\n")
print(ubicacion_actual) # Imprimir la ubicación actual del directorio de trabajo
